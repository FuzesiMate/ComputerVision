// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cvdata.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cvdata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cvdata {
class ObjectPositionsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ObjectPositions> {
} _ObjectPositions_default_instance_;
class ObjectDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Object> {
} _Object_default_instance_;
class MarkerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Marker> {
} _Marker_default_instance_;
class ThreeDPositionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ThreeDPosition> {
} _ThreeDPosition_default_instance_;
class TwoDPositionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TwoDPosition> {
} _TwoDPosition_default_instance_;

namespace protobuf_cvdata_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPositions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPositions, objects_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPositions, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPositions, frameindex_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, markers_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Marker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Marker, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Marker, realposition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Marker, screenpositions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Marker, tracked_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThreeDPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThreeDPosition, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThreeDPosition, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThreeDPosition, z_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TwoDPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TwoDPosition, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TwoDPosition, y_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(ObjectPositions)},
  { 8, -1, sizeof(Object)},
  { 15, -1, sizeof(Marker)},
  { 24, -1, sizeof(ThreeDPosition)},
  { 32, -1, sizeof(TwoDPosition)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ObjectPositions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Object_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Marker_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ThreeDPosition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TwoDPosition_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cvdata.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace

void TableStruct::Shutdown() {
  _ObjectPositions_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Object_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Marker_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _ThreeDPosition_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _TwoDPosition_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ObjectPositions_default_instance_.DefaultConstruct();
  _Object_default_instance_.DefaultConstruct();
  _Marker_default_instance_.DefaultConstruct();
  _ThreeDPosition_default_instance_.DefaultConstruct();
  _TwoDPosition_default_instance_.DefaultConstruct();
  _Marker_default_instance_.get_mutable()->realposition_ = const_cast< ::cvdata::ThreeDPosition*>(
      ::cvdata::ThreeDPosition::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\014cvdata.proto\022\006cvdata\"Y\n\017ObjectPosition"
      "s\022\037\n\007objects\030\001 \003(\0132\016.cvdata.Object\022\021\n\tti"
      "mestamp\030\002 \001(\003\022\022\n\nframeindex\030\003 \001(\003\"7\n\006Obj"
      "ect\022\014\n\004name\030\001 \001(\t\022\037\n\007markers\030\002 \003(\0132\016.cvd"
      "ata.Marker\"\204\001\n\006Marker\022\014\n\004name\030\001 \001(\t\022,\n\014r"
      "ealposition\030\002 \001(\0132\026.cvdata.ThreeDPositio"
      "n\022-\n\017screenPositions\030\003 \003(\0132\024.cvdata.TwoD"
      "Position\022\017\n\007tracked\030\004 \001(\010\"1\n\016ThreeDPosit"
      "ion\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\"$\n\014"
      "TwoDPosition\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001b\006prot"
      "o3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 402);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cvdata.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_cvdata_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectPositions::kObjectsFieldNumber;
const int ObjectPositions::kTimestampFieldNumber;
const int ObjectPositions::kFrameindexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectPositions::ObjectPositions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cvdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cvdata.ObjectPositions)
}
ObjectPositions::ObjectPositions(const ObjectPositions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      objects_(from.objects_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    reinterpret_cast<char*>(&frameindex_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(frameindex_));
  // @@protoc_insertion_point(copy_constructor:cvdata.ObjectPositions)
}

void ObjectPositions::SharedCtor() {
  ::memset(&timestamp_, 0, reinterpret_cast<char*>(&frameindex_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(frameindex_));
  _cached_size_ = 0;
}

ObjectPositions::~ObjectPositions() {
  // @@protoc_insertion_point(destructor:cvdata.ObjectPositions)
  SharedDtor();
}

void ObjectPositions::SharedDtor() {
}

void ObjectPositions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectPositions::descriptor() {
  protobuf_cvdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cvdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObjectPositions& ObjectPositions::default_instance() {
  protobuf_cvdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

ObjectPositions* ObjectPositions::New(::google::protobuf::Arena* arena) const {
  ObjectPositions* n = new ObjectPositions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectPositions::Clear() {
// @@protoc_insertion_point(message_clear_start:cvdata.ObjectPositions)
  objects_.Clear();
  ::memset(&timestamp_, 0, reinterpret_cast<char*>(&frameindex_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(frameindex_));
}

bool ObjectPositions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cvdata.ObjectPositions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cvdata.Object objects = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_objects()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 frameindex = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &frameindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cvdata.ObjectPositions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cvdata.ObjectPositions)
  return false;
#undef DO_
}

void ObjectPositions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cvdata.ObjectPositions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cvdata.Object objects = 1;
  for (unsigned int i = 0, n = this->objects_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->objects(i), output);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  // int64 frameindex = 3;
  if (this->frameindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->frameindex(), output);
  }

  // @@protoc_insertion_point(serialize_end:cvdata.ObjectPositions)
}

::google::protobuf::uint8* ObjectPositions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cvdata.ObjectPositions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cvdata.Object objects = 1;
  for (unsigned int i = 0, n = this->objects_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->objects(i), deterministic, target);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timestamp(), target);
  }

  // int64 frameindex = 3;
  if (this->frameindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->frameindex(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cvdata.ObjectPositions)
  return target;
}

size_t ObjectPositions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cvdata.ObjectPositions)
  size_t total_size = 0;

  // repeated .cvdata.Object objects = 1;
  {
    unsigned int count = this->objects_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->objects(i));
    }
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // int64 frameindex = 3;
  if (this->frameindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->frameindex());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectPositions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cvdata.ObjectPositions)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectPositions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectPositions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cvdata.ObjectPositions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cvdata.ObjectPositions)
    MergeFrom(*source);
  }
}

void ObjectPositions::MergeFrom(const ObjectPositions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cvdata.ObjectPositions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objects_.MergeFrom(from.objects_);
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.frameindex() != 0) {
    set_frameindex(from.frameindex());
  }
}

void ObjectPositions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cvdata.ObjectPositions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectPositions::CopyFrom(const ObjectPositions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cvdata.ObjectPositions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectPositions::IsInitialized() const {
  return true;
}

void ObjectPositions::Swap(ObjectPositions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectPositions::InternalSwap(ObjectPositions* other) {
  objects_.InternalSwap(&other->objects_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(frameindex_, other->frameindex_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectPositions::GetMetadata() const {
  protobuf_cvdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cvdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectPositions

// repeated .cvdata.Object objects = 1;
int ObjectPositions::objects_size() const {
  return objects_.size();
}
void ObjectPositions::clear_objects() {
  objects_.Clear();
}
const ::cvdata::Object& ObjectPositions::objects(int index) const {
  // @@protoc_insertion_point(field_get:cvdata.ObjectPositions.objects)
  return objects_.Get(index);
}
::cvdata::Object* ObjectPositions::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:cvdata.ObjectPositions.objects)
  return objects_.Mutable(index);
}
::cvdata::Object* ObjectPositions::add_objects() {
  // @@protoc_insertion_point(field_add:cvdata.ObjectPositions.objects)
  return objects_.Add();
}
::google::protobuf::RepeatedPtrField< ::cvdata::Object >*
ObjectPositions::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:cvdata.ObjectPositions.objects)
  return &objects_;
}
const ::google::protobuf::RepeatedPtrField< ::cvdata::Object >&
ObjectPositions::objects() const {
  // @@protoc_insertion_point(field_list:cvdata.ObjectPositions.objects)
  return objects_;
}

// int64 timestamp = 2;
void ObjectPositions::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ObjectPositions::timestamp() const {
  // @@protoc_insertion_point(field_get:cvdata.ObjectPositions.timestamp)
  return timestamp_;
}
void ObjectPositions::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cvdata.ObjectPositions.timestamp)
}

// int64 frameindex = 3;
void ObjectPositions::clear_frameindex() {
  frameindex_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ObjectPositions::frameindex() const {
  // @@protoc_insertion_point(field_get:cvdata.ObjectPositions.frameindex)
  return frameindex_;
}
void ObjectPositions::set_frameindex(::google::protobuf::int64 value) {
  
  frameindex_ = value;
  // @@protoc_insertion_point(field_set:cvdata.ObjectPositions.frameindex)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Object::kNameFieldNumber;
const int Object::kMarkersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Object::Object()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cvdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cvdata.Object)
}
Object::Object(const Object& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      markers_(from.markers_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:cvdata.Object)
}

void Object::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Object::~Object() {
  // @@protoc_insertion_point(destructor:cvdata.Object)
  SharedDtor();
}

void Object::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Object::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Object::descriptor() {
  protobuf_cvdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cvdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Object& Object::default_instance() {
  protobuf_cvdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

Object* Object::New(::google::protobuf::Arena* arena) const {
  Object* n = new Object;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Object::Clear() {
// @@protoc_insertion_point(message_clear_start:cvdata.Object)
  markers_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Object::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cvdata.Object)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cvdata.Object.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cvdata.Marker markers = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_markers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cvdata.Object)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cvdata.Object)
  return false;
#undef DO_
}

void Object::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cvdata.Object)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cvdata.Object.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .cvdata.Marker markers = 2;
  for (unsigned int i = 0, n = this->markers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->markers(i), output);
  }

  // @@protoc_insertion_point(serialize_end:cvdata.Object)
}

::google::protobuf::uint8* Object::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cvdata.Object)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cvdata.Object.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .cvdata.Marker markers = 2;
  for (unsigned int i = 0, n = this->markers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->markers(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cvdata.Object)
  return target;
}

size_t Object::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cvdata.Object)
  size_t total_size = 0;

  // repeated .cvdata.Marker markers = 2;
  {
    unsigned int count = this->markers_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->markers(i));
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Object::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cvdata.Object)
  GOOGLE_DCHECK_NE(&from, this);
  const Object* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Object>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cvdata.Object)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cvdata.Object)
    MergeFrom(*source);
  }
}

void Object::MergeFrom(const Object& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cvdata.Object)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  markers_.MergeFrom(from.markers_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void Object::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cvdata.Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Object::CopyFrom(const Object& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cvdata.Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object::IsInitialized() const {
  return true;
}

void Object::Swap(Object* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Object::InternalSwap(Object* other) {
  markers_.InternalSwap(&other->markers_);
  name_.Swap(&other->name_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Object::GetMetadata() const {
  protobuf_cvdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cvdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Object

// string name = 1;
void Object::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Object::name() const {
  // @@protoc_insertion_point(field_get:cvdata.Object.name)
  return name_.GetNoArena();
}
void Object::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cvdata.Object.name)
}
#if LANG_CXX11
void Object::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cvdata.Object.name)
}
#endif
void Object::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cvdata.Object.name)
}
void Object::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cvdata.Object.name)
}
::std::string* Object::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:cvdata.Object.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Object::release_name() {
  // @@protoc_insertion_point(field_release:cvdata.Object.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Object::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:cvdata.Object.name)
}

// repeated .cvdata.Marker markers = 2;
int Object::markers_size() const {
  return markers_.size();
}
void Object::clear_markers() {
  markers_.Clear();
}
const ::cvdata::Marker& Object::markers(int index) const {
  // @@protoc_insertion_point(field_get:cvdata.Object.markers)
  return markers_.Get(index);
}
::cvdata::Marker* Object::mutable_markers(int index) {
  // @@protoc_insertion_point(field_mutable:cvdata.Object.markers)
  return markers_.Mutable(index);
}
::cvdata::Marker* Object::add_markers() {
  // @@protoc_insertion_point(field_add:cvdata.Object.markers)
  return markers_.Add();
}
::google::protobuf::RepeatedPtrField< ::cvdata::Marker >*
Object::mutable_markers() {
  // @@protoc_insertion_point(field_mutable_list:cvdata.Object.markers)
  return &markers_;
}
const ::google::protobuf::RepeatedPtrField< ::cvdata::Marker >&
Object::markers() const {
  // @@protoc_insertion_point(field_list:cvdata.Object.markers)
  return markers_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Marker::kNameFieldNumber;
const int Marker::kRealpositionFieldNumber;
const int Marker::kScreenPositionsFieldNumber;
const int Marker::kTrackedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Marker::Marker()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cvdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cvdata.Marker)
}
Marker::Marker(const Marker& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      screenpositions_(from.screenpositions_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_realposition()) {
    realposition_ = new ::cvdata::ThreeDPosition(*from.realposition_);
  } else {
    realposition_ = NULL;
  }
  tracked_ = from.tracked_;
  // @@protoc_insertion_point(copy_constructor:cvdata.Marker)
}

void Marker::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&realposition_, 0, reinterpret_cast<char*>(&tracked_) -
    reinterpret_cast<char*>(&realposition_) + sizeof(tracked_));
  _cached_size_ = 0;
}

Marker::~Marker() {
  // @@protoc_insertion_point(destructor:cvdata.Marker)
  SharedDtor();
}

void Marker::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete realposition_;
  }
}

void Marker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Marker::descriptor() {
  protobuf_cvdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cvdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Marker& Marker::default_instance() {
  protobuf_cvdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

Marker* Marker::New(::google::protobuf::Arena* arena) const {
  Marker* n = new Marker;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Marker::Clear() {
// @@protoc_insertion_point(message_clear_start:cvdata.Marker)
  screenpositions_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && realposition_ != NULL) {
    delete realposition_;
  }
  realposition_ = NULL;
  tracked_ = false;
}

bool Marker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cvdata.Marker)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cvdata.Marker.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cvdata.ThreeDPosition realposition = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_realposition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cvdata.TwoDPosition screenPositions = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_screenpositions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool tracked = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tracked_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cvdata.Marker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cvdata.Marker)
  return false;
#undef DO_
}

void Marker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cvdata.Marker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cvdata.Marker.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .cvdata.ThreeDPosition realposition = 2;
  if (this->has_realposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->realposition_, output);
  }

  // repeated .cvdata.TwoDPosition screenPositions = 3;
  for (unsigned int i = 0, n = this->screenpositions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->screenpositions(i), output);
  }

  // bool tracked = 4;
  if (this->tracked() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->tracked(), output);
  }

  // @@protoc_insertion_point(serialize_end:cvdata.Marker)
}

::google::protobuf::uint8* Marker::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cvdata.Marker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cvdata.Marker.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .cvdata.ThreeDPosition realposition = 2;
  if (this->has_realposition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->realposition_, deterministic, target);
  }

  // repeated .cvdata.TwoDPosition screenPositions = 3;
  for (unsigned int i = 0, n = this->screenpositions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->screenpositions(i), deterministic, target);
  }

  // bool tracked = 4;
  if (this->tracked() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->tracked(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cvdata.Marker)
  return target;
}

size_t Marker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cvdata.Marker)
  size_t total_size = 0;

  // repeated .cvdata.TwoDPosition screenPositions = 3;
  {
    unsigned int count = this->screenpositions_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->screenpositions(i));
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .cvdata.ThreeDPosition realposition = 2;
  if (this->has_realposition()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->realposition_);
  }

  // bool tracked = 4;
  if (this->tracked() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Marker::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cvdata.Marker)
  GOOGLE_DCHECK_NE(&from, this);
  const Marker* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Marker>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cvdata.Marker)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cvdata.Marker)
    MergeFrom(*source);
  }
}

void Marker::MergeFrom(const Marker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cvdata.Marker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  screenpositions_.MergeFrom(from.screenpositions_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_realposition()) {
    mutable_realposition()->::cvdata::ThreeDPosition::MergeFrom(from.realposition());
  }
  if (from.tracked() != 0) {
    set_tracked(from.tracked());
  }
}

void Marker::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cvdata.Marker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Marker::CopyFrom(const Marker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cvdata.Marker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Marker::IsInitialized() const {
  return true;
}

void Marker::Swap(Marker* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Marker::InternalSwap(Marker* other) {
  screenpositions_.InternalSwap(&other->screenpositions_);
  name_.Swap(&other->name_);
  std::swap(realposition_, other->realposition_);
  std::swap(tracked_, other->tracked_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Marker::GetMetadata() const {
  protobuf_cvdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cvdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Marker

// string name = 1;
void Marker::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Marker::name() const {
  // @@protoc_insertion_point(field_get:cvdata.Marker.name)
  return name_.GetNoArena();
}
void Marker::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cvdata.Marker.name)
}
#if LANG_CXX11
void Marker::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cvdata.Marker.name)
}
#endif
void Marker::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cvdata.Marker.name)
}
void Marker::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cvdata.Marker.name)
}
::std::string* Marker::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:cvdata.Marker.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Marker::release_name() {
  // @@protoc_insertion_point(field_release:cvdata.Marker.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Marker::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:cvdata.Marker.name)
}

// .cvdata.ThreeDPosition realposition = 2;
bool Marker::has_realposition() const {
  return this != internal_default_instance() && realposition_ != NULL;
}
void Marker::clear_realposition() {
  if (GetArenaNoVirtual() == NULL && realposition_ != NULL) delete realposition_;
  realposition_ = NULL;
}
const ::cvdata::ThreeDPosition& Marker::realposition() const {
  // @@protoc_insertion_point(field_get:cvdata.Marker.realposition)
  return realposition_ != NULL ? *realposition_
                         : *::cvdata::ThreeDPosition::internal_default_instance();
}
::cvdata::ThreeDPosition* Marker::mutable_realposition() {
  
  if (realposition_ == NULL) {
    realposition_ = new ::cvdata::ThreeDPosition;
  }
  // @@protoc_insertion_point(field_mutable:cvdata.Marker.realposition)
  return realposition_;
}
::cvdata::ThreeDPosition* Marker::release_realposition() {
  // @@protoc_insertion_point(field_release:cvdata.Marker.realposition)
  
  ::cvdata::ThreeDPosition* temp = realposition_;
  realposition_ = NULL;
  return temp;
}
void Marker::set_allocated_realposition(::cvdata::ThreeDPosition* realposition) {
  delete realposition_;
  realposition_ = realposition;
  if (realposition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cvdata.Marker.realposition)
}

// repeated .cvdata.TwoDPosition screenPositions = 3;
int Marker::screenpositions_size() const {
  return screenpositions_.size();
}
void Marker::clear_screenpositions() {
  screenpositions_.Clear();
}
const ::cvdata::TwoDPosition& Marker::screenpositions(int index) const {
  // @@protoc_insertion_point(field_get:cvdata.Marker.screenPositions)
  return screenpositions_.Get(index);
}
::cvdata::TwoDPosition* Marker::mutable_screenpositions(int index) {
  // @@protoc_insertion_point(field_mutable:cvdata.Marker.screenPositions)
  return screenpositions_.Mutable(index);
}
::cvdata::TwoDPosition* Marker::add_screenpositions() {
  // @@protoc_insertion_point(field_add:cvdata.Marker.screenPositions)
  return screenpositions_.Add();
}
::google::protobuf::RepeatedPtrField< ::cvdata::TwoDPosition >*
Marker::mutable_screenpositions() {
  // @@protoc_insertion_point(field_mutable_list:cvdata.Marker.screenPositions)
  return &screenpositions_;
}
const ::google::protobuf::RepeatedPtrField< ::cvdata::TwoDPosition >&
Marker::screenpositions() const {
  // @@protoc_insertion_point(field_list:cvdata.Marker.screenPositions)
  return screenpositions_;
}

// bool tracked = 4;
void Marker::clear_tracked() {
  tracked_ = false;
}
bool Marker::tracked() const {
  // @@protoc_insertion_point(field_get:cvdata.Marker.tracked)
  return tracked_;
}
void Marker::set_tracked(bool value) {
  
  tracked_ = value;
  // @@protoc_insertion_point(field_set:cvdata.Marker.tracked)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ThreeDPosition::kXFieldNumber;
const int ThreeDPosition::kYFieldNumber;
const int ThreeDPosition::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ThreeDPosition::ThreeDPosition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cvdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cvdata.ThreeDPosition)
}
ThreeDPosition::ThreeDPosition(const ThreeDPosition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:cvdata.ThreeDPosition)
}

void ThreeDPosition::SharedCtor() {
  ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
  _cached_size_ = 0;
}

ThreeDPosition::~ThreeDPosition() {
  // @@protoc_insertion_point(destructor:cvdata.ThreeDPosition)
  SharedDtor();
}

void ThreeDPosition::SharedDtor() {
}

void ThreeDPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThreeDPosition::descriptor() {
  protobuf_cvdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cvdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ThreeDPosition& ThreeDPosition::default_instance() {
  protobuf_cvdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

ThreeDPosition* ThreeDPosition::New(::google::protobuf::Arena* arena) const {
  ThreeDPosition* n = new ThreeDPosition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ThreeDPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:cvdata.ThreeDPosition)
  ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
}

bool ThreeDPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cvdata.ThreeDPosition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cvdata.ThreeDPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cvdata.ThreeDPosition)
  return false;
#undef DO_
}

void ThreeDPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cvdata.ThreeDPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // double y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // double z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // @@protoc_insertion_point(serialize_end:cvdata.ThreeDPosition)
}

::google::protobuf::uint8* ThreeDPosition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cvdata.ThreeDPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // double y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // double z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cvdata.ThreeDPosition)
  return target;
}

size_t ThreeDPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cvdata.ThreeDPosition)
  size_t total_size = 0;

  // double x = 1;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (this->z() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThreeDPosition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cvdata.ThreeDPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const ThreeDPosition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ThreeDPosition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cvdata.ThreeDPosition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cvdata.ThreeDPosition)
    MergeFrom(*source);
  }
}

void ThreeDPosition::MergeFrom(const ThreeDPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cvdata.ThreeDPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void ThreeDPosition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cvdata.ThreeDPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThreeDPosition::CopyFrom(const ThreeDPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cvdata.ThreeDPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThreeDPosition::IsInitialized() const {
  return true;
}

void ThreeDPosition::Swap(ThreeDPosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ThreeDPosition::InternalSwap(ThreeDPosition* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ThreeDPosition::GetMetadata() const {
  protobuf_cvdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cvdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ThreeDPosition

// double x = 1;
void ThreeDPosition::clear_x() {
  x_ = 0;
}
double ThreeDPosition::x() const {
  // @@protoc_insertion_point(field_get:cvdata.ThreeDPosition.x)
  return x_;
}
void ThreeDPosition::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:cvdata.ThreeDPosition.x)
}

// double y = 2;
void ThreeDPosition::clear_y() {
  y_ = 0;
}
double ThreeDPosition::y() const {
  // @@protoc_insertion_point(field_get:cvdata.ThreeDPosition.y)
  return y_;
}
void ThreeDPosition::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:cvdata.ThreeDPosition.y)
}

// double z = 3;
void ThreeDPosition::clear_z() {
  z_ = 0;
}
double ThreeDPosition::z() const {
  // @@protoc_insertion_point(field_get:cvdata.ThreeDPosition.z)
  return z_;
}
void ThreeDPosition::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:cvdata.ThreeDPosition.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TwoDPosition::kXFieldNumber;
const int TwoDPosition::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TwoDPosition::TwoDPosition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cvdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cvdata.TwoDPosition)
}
TwoDPosition::TwoDPosition(const TwoDPosition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:cvdata.TwoDPosition)
}

void TwoDPosition::SharedCtor() {
  ::memset(&x_, 0, reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_) + sizeof(y_));
  _cached_size_ = 0;
}

TwoDPosition::~TwoDPosition() {
  // @@protoc_insertion_point(destructor:cvdata.TwoDPosition)
  SharedDtor();
}

void TwoDPosition::SharedDtor() {
}

void TwoDPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TwoDPosition::descriptor() {
  protobuf_cvdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cvdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TwoDPosition& TwoDPosition::default_instance() {
  protobuf_cvdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

TwoDPosition* TwoDPosition::New(::google::protobuf::Arena* arena) const {
  TwoDPosition* n = new TwoDPosition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TwoDPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:cvdata.TwoDPosition)
  ::memset(&x_, 0, reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_) + sizeof(y_));
}

bool TwoDPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cvdata.TwoDPosition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cvdata.TwoDPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cvdata.TwoDPosition)
  return false;
#undef DO_
}

void TwoDPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cvdata.TwoDPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // double y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // @@protoc_insertion_point(serialize_end:cvdata.TwoDPosition)
}

::google::protobuf::uint8* TwoDPosition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cvdata.TwoDPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // double y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cvdata.TwoDPosition)
  return target;
}

size_t TwoDPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cvdata.TwoDPosition)
  size_t total_size = 0;

  // double x = 1;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TwoDPosition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cvdata.TwoDPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const TwoDPosition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TwoDPosition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cvdata.TwoDPosition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cvdata.TwoDPosition)
    MergeFrom(*source);
  }
}

void TwoDPosition::MergeFrom(const TwoDPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cvdata.TwoDPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void TwoDPosition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cvdata.TwoDPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TwoDPosition::CopyFrom(const TwoDPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cvdata.TwoDPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TwoDPosition::IsInitialized() const {
  return true;
}

void TwoDPosition::Swap(TwoDPosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TwoDPosition::InternalSwap(TwoDPosition* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TwoDPosition::GetMetadata() const {
  protobuf_cvdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cvdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TwoDPosition

// double x = 1;
void TwoDPosition::clear_x() {
  x_ = 0;
}
double TwoDPosition::x() const {
  // @@protoc_insertion_point(field_get:cvdata.TwoDPosition.x)
  return x_;
}
void TwoDPosition::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:cvdata.TwoDPosition.x)
}

// double y = 2;
void TwoDPosition::clear_y() {
  y_ = 0;
}
double TwoDPosition::y() const {
  // @@protoc_insertion_point(field_get:cvdata.TwoDPosition.y)
  return y_;
}
void TwoDPosition::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:cvdata.TwoDPosition.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace cvdata

// @@protoc_insertion_point(global_scope)
