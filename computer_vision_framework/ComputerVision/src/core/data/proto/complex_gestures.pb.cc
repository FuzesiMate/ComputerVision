// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: complex_gestures.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "complex_gestures.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace leapmotion {
class ComplexGestureDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ComplexGesture>
     _instance;
} _ComplexGesture_default_instance_;

namespace protobuf_complex_5fgestures_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexGesture, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexGesture, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexGesture, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexGesture, valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexGesture, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexGesture, timestamp_),
  0,
  1,
  2,
  3,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(ComplexGesture)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ComplexGesture_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "complex_gestures.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ComplexGesture_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ComplexGesture_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\026complex_gestures.proto\022\nleapmotion\"\251\002\n"
      "\016ComplexGesture\022\n\n\002id\030\001 \001(\005\022\r\n\005valid\030\007 \001"
      "(\010\022-\n\004type\030\t \001(\0162\037.leapmotion.ComplexGes"
      "ture.Type\022\021\n\ttimestamp\030\n \001(\003\"\271\001\n\004Type\022\020\n"
      "\014TYPE_INVALID\020\000\022\016\n\nTYPE_SWIPE\020\001\022\017\n\013TYPE_"
      "CIRCLE\020\002\022\023\n\017TYPE_SCREEN_TAP\020\003\022\020\n\014TYPE_KE"
      "Y_TAP\020\004\022\r\n\tTYPE_GRAB\020\005\022\021\n\rTYPE_SPEED_UP\020"
      "\006\022\022\n\016TYPE_SLOW_DOWN\020\007\022\022\n\016TYPE_SELECTION\020"
      "\010\022\r\n\tTYPE_STOP\020\tB\?\n,hu.bme.mit.inf.modes"
      "3.messaging.mms.messagesB\017ComplexGesture"
      "s"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 401);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "complex_gestures.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_complex_5fgestures_2eproto

const ::google::protobuf::EnumDescriptor* ComplexGesture_Type_descriptor() {
  protobuf_complex_5fgestures_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_complex_5fgestures_2eproto::file_level_enum_descriptors[0];
}
bool ComplexGesture_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ComplexGesture_Type ComplexGesture::TYPE_INVALID;
const ComplexGesture_Type ComplexGesture::TYPE_SWIPE;
const ComplexGesture_Type ComplexGesture::TYPE_CIRCLE;
const ComplexGesture_Type ComplexGesture::TYPE_SCREEN_TAP;
const ComplexGesture_Type ComplexGesture::TYPE_KEY_TAP;
const ComplexGesture_Type ComplexGesture::TYPE_GRAB;
const ComplexGesture_Type ComplexGesture::TYPE_SPEED_UP;
const ComplexGesture_Type ComplexGesture::TYPE_SLOW_DOWN;
const ComplexGesture_Type ComplexGesture::TYPE_SELECTION;
const ComplexGesture_Type ComplexGesture::TYPE_STOP;
const ComplexGesture_Type ComplexGesture::Type_MIN;
const ComplexGesture_Type ComplexGesture::Type_MAX;
const int ComplexGesture::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ComplexGesture::kIdFieldNumber;
const int ComplexGesture::kValidFieldNumber;
const int ComplexGesture::kTypeFieldNumber;
const int ComplexGesture::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ComplexGesture::ComplexGesture()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_complex_5fgestures_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:leapmotion.ComplexGesture)
}
ComplexGesture::ComplexGesture(const ComplexGesture& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&id_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:leapmotion.ComplexGesture)
}

void ComplexGesture::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&id_)) + sizeof(timestamp_));
}

ComplexGesture::~ComplexGesture() {
  // @@protoc_insertion_point(destructor:leapmotion.ComplexGesture)
  SharedDtor();
}

void ComplexGesture::SharedDtor() {
}

void ComplexGesture::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComplexGesture::descriptor() {
  protobuf_complex_5fgestures_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_complex_5fgestures_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ComplexGesture& ComplexGesture::default_instance() {
  protobuf_complex_5fgestures_2eproto::InitDefaults();
  return *internal_default_instance();
}

ComplexGesture* ComplexGesture::New(::google::protobuf::Arena* arena) const {
  ComplexGesture* n = new ComplexGesture;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ComplexGesture::Clear() {
// @@protoc_insertion_point(message_clear_start:leapmotion.ComplexGesture)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&id_)) + sizeof(timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ComplexGesture::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:leapmotion.ComplexGesture)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool valid = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .leapmotion.ComplexGesture.Type type = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::leapmotion::ComplexGesture_Type_IsValid(value)) {
            set_type(static_cast< ::leapmotion::ComplexGesture_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                9, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 timestamp = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:leapmotion.ComplexGesture)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:leapmotion.ComplexGesture)
  return false;
#undef DO_
}

void ComplexGesture::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:leapmotion.ComplexGesture)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional bool valid = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->valid(), output);
  }

  // optional .leapmotion.ComplexGesture.Type type = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->type(), output);
  }

  // optional int64 timestamp = 10;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:leapmotion.ComplexGesture)
}

::google::protobuf::uint8* ComplexGesture::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:leapmotion.ComplexGesture)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional bool valid = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->valid(), target);
  }

  // optional .leapmotion.ComplexGesture.Type type = 9;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->type(), target);
  }

  // optional int64 timestamp = 10;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:leapmotion.ComplexGesture)
  return target;
}

size_t ComplexGesture::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:leapmotion.ComplexGesture)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional bool valid = 7;
    if (has_valid()) {
      total_size += 1 + 1;
    }

    // optional .leapmotion.ComplexGesture.Type type = 9;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int64 timestamp = 10;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComplexGesture::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:leapmotion.ComplexGesture)
  GOOGLE_DCHECK_NE(&from, this);
  const ComplexGesture* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ComplexGesture>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:leapmotion.ComplexGesture)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:leapmotion.ComplexGesture)
    MergeFrom(*source);
  }
}

void ComplexGesture::MergeFrom(const ComplexGesture& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:leapmotion.ComplexGesture)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      valid_ = from.valid_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ComplexGesture::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:leapmotion.ComplexGesture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComplexGesture::CopyFrom(const ComplexGesture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:leapmotion.ComplexGesture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComplexGesture::IsInitialized() const {
  return true;
}

void ComplexGesture::Swap(ComplexGesture* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ComplexGesture::InternalSwap(ComplexGesture* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(valid_, other->valid_);
  swap(type_, other->type_);
  swap(timestamp_, other->timestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ComplexGesture::GetMetadata() const {
  protobuf_complex_5fgestures_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_complex_5fgestures_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ComplexGesture

// optional int32 id = 1;
bool ComplexGesture::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ComplexGesture::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ComplexGesture::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ComplexGesture::clear_id() {
  id_ = 0;
  clear_has_id();
}
::google::protobuf::int32 ComplexGesture::id() const {
  // @@protoc_insertion_point(field_get:leapmotion.ComplexGesture.id)
  return id_;
}
void ComplexGesture::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:leapmotion.ComplexGesture.id)
}

// optional bool valid = 7;
bool ComplexGesture::has_valid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ComplexGesture::set_has_valid() {
  _has_bits_[0] |= 0x00000002u;
}
void ComplexGesture::clear_has_valid() {
  _has_bits_[0] &= ~0x00000002u;
}
void ComplexGesture::clear_valid() {
  valid_ = false;
  clear_has_valid();
}
bool ComplexGesture::valid() const {
  // @@protoc_insertion_point(field_get:leapmotion.ComplexGesture.valid)
  return valid_;
}
void ComplexGesture::set_valid(bool value) {
  set_has_valid();
  valid_ = value;
  // @@protoc_insertion_point(field_set:leapmotion.ComplexGesture.valid)
}

// optional .leapmotion.ComplexGesture.Type type = 9;
bool ComplexGesture::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ComplexGesture::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void ComplexGesture::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void ComplexGesture::clear_type() {
  type_ = 0;
  clear_has_type();
}
::leapmotion::ComplexGesture_Type ComplexGesture::type() const {
  // @@protoc_insertion_point(field_get:leapmotion.ComplexGesture.type)
  return static_cast< ::leapmotion::ComplexGesture_Type >(type_);
}
void ComplexGesture::set_type(::leapmotion::ComplexGesture_Type value) {
  assert(::leapmotion::ComplexGesture_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:leapmotion.ComplexGesture.type)
}

// optional int64 timestamp = 10;
bool ComplexGesture::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ComplexGesture::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
void ComplexGesture::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
void ComplexGesture::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 ComplexGesture::timestamp() const {
  // @@protoc_insertion_point(field_get:leapmotion.ComplexGesture.timestamp)
  return timestamp_;
}
void ComplexGesture::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:leapmotion.ComplexGesture.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace leapmotion

// @@protoc_insertion_point(global_scope)
