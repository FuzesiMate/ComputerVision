// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: complex_gestures.proto

#ifndef PROTOBUF_complex_5fgestures_2eproto__INCLUDED
#define PROTOBUF_complex_5fgestures_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace leapmotion {
class ComplexGesture;
class ComplexGestureDefaultTypeInternal;
extern ComplexGestureDefaultTypeInternal _ComplexGesture_default_instance_;
}  // namespace leapmotion

namespace leapmotion {

namespace protobuf_complex_5fgestures_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_complex_5fgestures_2eproto

enum ComplexGesture_Type {
  ComplexGesture_Type_TYPE_INVALID = 0,
  ComplexGesture_Type_TYPE_SWIPE = 1,
  ComplexGesture_Type_TYPE_CIRCLE = 2,
  ComplexGesture_Type_TYPE_SCREEN_TAP = 3,
  ComplexGesture_Type_TYPE_KEY_TAP = 4,
  ComplexGesture_Type_TYPE_GRAB = 5,
  ComplexGesture_Type_TYPE_SPEED_UP = 6,
  ComplexGesture_Type_TYPE_SLOW_DOWN = 7,
  ComplexGesture_Type_TYPE_SELECTION = 8,
  ComplexGesture_Type_TYPE_STOP = 9
};
bool ComplexGesture_Type_IsValid(int value);
const ComplexGesture_Type ComplexGesture_Type_Type_MIN = ComplexGesture_Type_TYPE_INVALID;
const ComplexGesture_Type ComplexGesture_Type_Type_MAX = ComplexGesture_Type_TYPE_STOP;
const int ComplexGesture_Type_Type_ARRAYSIZE = ComplexGesture_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* ComplexGesture_Type_descriptor();
inline const ::std::string& ComplexGesture_Type_Name(ComplexGesture_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    ComplexGesture_Type_descriptor(), value);
}
inline bool ComplexGesture_Type_Parse(
    const ::std::string& name, ComplexGesture_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ComplexGesture_Type>(
    ComplexGesture_Type_descriptor(), name, value);
}
// ===================================================================

class ComplexGesture : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:leapmotion.ComplexGesture) */ {
 public:
  ComplexGesture();
  virtual ~ComplexGesture();

  ComplexGesture(const ComplexGesture& from);

  inline ComplexGesture& operator=(const ComplexGesture& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ComplexGesture(ComplexGesture&& from) noexcept
    : ComplexGesture() {
    *this = ::std::move(from);
  }

  inline ComplexGesture& operator=(ComplexGesture&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ComplexGesture& default_instance();

  static inline const ComplexGesture* internal_default_instance() {
    return reinterpret_cast<const ComplexGesture*>(
               &_ComplexGesture_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ComplexGesture* other);
  friend void swap(ComplexGesture& a, ComplexGesture& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ComplexGesture* New() const PROTOBUF_FINAL { return New(NULL); }

  ComplexGesture* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ComplexGesture& from);
  void MergeFrom(const ComplexGesture& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ComplexGesture* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ComplexGesture_Type Type;
  static const Type TYPE_INVALID =
    ComplexGesture_Type_TYPE_INVALID;
  static const Type TYPE_SWIPE =
    ComplexGesture_Type_TYPE_SWIPE;
  static const Type TYPE_CIRCLE =
    ComplexGesture_Type_TYPE_CIRCLE;
  static const Type TYPE_SCREEN_TAP =
    ComplexGesture_Type_TYPE_SCREEN_TAP;
  static const Type TYPE_KEY_TAP =
    ComplexGesture_Type_TYPE_KEY_TAP;
  static const Type TYPE_GRAB =
    ComplexGesture_Type_TYPE_GRAB;
  static const Type TYPE_SPEED_UP =
    ComplexGesture_Type_TYPE_SPEED_UP;
  static const Type TYPE_SLOW_DOWN =
    ComplexGesture_Type_TYPE_SLOW_DOWN;
  static const Type TYPE_SELECTION =
    ComplexGesture_Type_TYPE_SELECTION;
  static const Type TYPE_STOP =
    ComplexGesture_Type_TYPE_STOP;
  static inline bool Type_IsValid(int value) {
    return ComplexGesture_Type_IsValid(value);
  }
  static const Type Type_MIN =
    ComplexGesture_Type_Type_MIN;
  static const Type Type_MAX =
    ComplexGesture_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    ComplexGesture_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return ComplexGesture_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return ComplexGesture_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return ComplexGesture_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional bool valid = 7;
  bool has_valid() const;
  void clear_valid();
  static const int kValidFieldNumber = 7;
  bool valid() const;
  void set_valid(bool value);

  // optional .leapmotion.ComplexGesture.Type type = 9;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 9;
  ::leapmotion::ComplexGesture_Type type() const;
  void set_type(::leapmotion::ComplexGesture_Type value);

  // optional int64 timestamp = 10;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 10;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:leapmotion.ComplexGesture)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_valid();
  void clear_has_valid();
  void set_has_type();
  void clear_has_type();
  void set_has_timestamp();
  void clear_has_timestamp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  bool valid_;
  int type_;
  ::google::protobuf::int64 timestamp_;
  friend struct protobuf_complex_5fgestures_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ComplexGesture

// optional int32 id = 1;
inline bool ComplexGesture::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ComplexGesture::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ComplexGesture::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ComplexGesture::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ComplexGesture::id() const {
  // @@protoc_insertion_point(field_get:leapmotion.ComplexGesture.id)
  return id_;
}
inline void ComplexGesture::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:leapmotion.ComplexGesture.id)
}

// optional bool valid = 7;
inline bool ComplexGesture::has_valid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ComplexGesture::set_has_valid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ComplexGesture::clear_has_valid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ComplexGesture::clear_valid() {
  valid_ = false;
  clear_has_valid();
}
inline bool ComplexGesture::valid() const {
  // @@protoc_insertion_point(field_get:leapmotion.ComplexGesture.valid)
  return valid_;
}
inline void ComplexGesture::set_valid(bool value) {
  set_has_valid();
  valid_ = value;
  // @@protoc_insertion_point(field_set:leapmotion.ComplexGesture.valid)
}

// optional .leapmotion.ComplexGesture.Type type = 9;
inline bool ComplexGesture::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ComplexGesture::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ComplexGesture::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ComplexGesture::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::leapmotion::ComplexGesture_Type ComplexGesture::type() const {
  // @@protoc_insertion_point(field_get:leapmotion.ComplexGesture.type)
  return static_cast< ::leapmotion::ComplexGesture_Type >(type_);
}
inline void ComplexGesture::set_type(::leapmotion::ComplexGesture_Type value) {
  assert(::leapmotion::ComplexGesture_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:leapmotion.ComplexGesture.type)
}

// optional int64 timestamp = 10;
inline bool ComplexGesture::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ComplexGesture::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ComplexGesture::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ComplexGesture::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 ComplexGesture::timestamp() const {
  // @@protoc_insertion_point(field_get:leapmotion.ComplexGesture.timestamp)
  return timestamp_;
}
inline void ComplexGesture::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:leapmotion.ComplexGesture.timestamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace leapmotion

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::leapmotion::ComplexGesture_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::leapmotion::ComplexGesture_Type>() {
  return ::leapmotion::ComplexGesture_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_complex_5fgestures_2eproto__INCLUDED
